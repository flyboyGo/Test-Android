
RxJava中的设计模式
   想要透彻地分析RxJava这个框架，必须了解这个框架主要使用到的设计模式。这里必须掌握以下两种设计模式:
      1、观察者模式:实现响应式编程的基础。
      2、装饰器模式:各种操作符的具体实现类都通过装饰器模式来拓展完成。

观察者模式
   1、指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新:
      简单来说，就是被观察者持有多个观察者的引用，当其状态发生改变时调用这些观察者执行更新的方法。
   2、RxJava中的观察者模式是一种变种的观察者模式。

     RxJava核心部分(一)
     通过观察者模式实现RxJava核心部分:
     1、ObservableSource:被观察者顶层接口，提供订阅方法。
     2、Observable:被观察者抽象类，实现ObservableSource接口，并提供实际订阅的抽象方法。 Observer:观察者接口，提供处理事件的回调方法。
     3、ObservableOnSubscribe:被观察者与事件解耦的接口。
     4、Emitter:事件发射器接口，提供发送事件的方法。
     5、ObservableXXXX:具体的被观察者实现类，持有ObservableOnSubscribe接口的引用。
     6、XXXXEmitter:事件发射器具体实现，持有观察者的引用。
     7、XXXXObserver:具体观察者的实现类。


装饰器模式
   1、指在不改变现有对象结构的情况下，动态地给该对象增加一些职责(即增加其额外功能)的模式，它属于对象结构型模式。


   RxJava内存泄漏问题
   1、在页面销毁后，Observable仍然还有事件等待发送和处理，这个时候会导致Activity回收失败，从而致使内存泄漏。
   2、解决RxJava内存泄漏主要方式是在页面关闭之前取消所有的订阅:
      (1): 使用Disposable，关闭页面时调用dispose()取消订阅。
      (2): 使用CompositeDisposable，添加一组Disposable，在关闭页面时同时取消订阅。
   3、使用框架自定取消订阅，其原理是跟Activity生命周期进行绑定，在摧毁时取消订阅。



