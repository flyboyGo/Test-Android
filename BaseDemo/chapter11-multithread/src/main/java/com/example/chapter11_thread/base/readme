
       1.同步任务与异步任务
          (1): 同步的执行任务:在执行程序时，如果没有收到执行结果，就一直等，不继续往下执行，直到收到执行结果，才接着往下执行。
          (2): 异步的执行任务:在执行程序时，如果遇到需要等待的任务，就另外 "开辟一个子线程" 去执行它，自己继续往下执行其他程序。
                子线程有结果时，会将结果发送给主线程。


       2.Android中的多线程:主线程与子线程
           (1): 类比到我们Android app程序。App一启动，本身就是一个线程，这个线程被称为主线程mainThread，负责显示界面，跟用户交互。
           (2): 另外，界面通常被称为Ul(User Interface）,因此，主线程也被称为是UI线程。
                所以，我们见到这两种说法，只需要知道它们指的是同一个东西就行了。

         两个原则:
             (1): 主线程不能执行网络请求/文件读写等耗时操作 主线程可以开启一个子线程去执行，自己接着执行主界面的响应任务，不影响用户的交互感受。
             (2): 子线程不能执行UI刷新

         Handler异步通信系统
              （1): Handler机制主要的几个角色:Handler、Message、Looper、MessageQueue
               (2): 主线程在一开始就建立了这么一套系统


          1、理解Android网络请求的本质:客户端与服务端交互，获取符合条件的数据

          2、理解URI与URL

          (1): URL:(Uniform Resource Locator，统一资源定位器》，它是WWW的统一资源定位标志，就是指网络地址。
          (2): URI:(Uniform Resource ldentifier，统一资源标志符)，表示的是web上每一种可用的资源，如HTML文档、图像、视频片段、程序等。

               https:l/limg01.dmhmusic.com/0103/MO0/5E/73/ChR45GDe0wiAWObhAAHWRa6yrVE360.jpg
               https:l/static1-music.taihe.com/clientVimg/3e1deb9.png

          结论:
          URL是URI的一种。
          URI是对网络资源更宽泛的一种标识。
          URL是我们对网络链接最常见的一个说法，更多的指http://www开头的

          3、GET请求

             Get请求      主要目的:从服务端获取将合条件的数据。
             Get :得到，获得。

             URL的各个组成部分:
             Get请求的URL举例:https:/www.tianqiapi.com/free/day? cityid=10010&cityname=北京&date=20210708

             https://     www.tianqiapi.com:80  /freelday  ? city_id=1010&city_name=北京&date=20210708
             scheme       host(域名):端口         path(路径)     query(查询参数)
                          authority                              条件

          4、POST请求

             Post请求主要目的 : 向服务端提交数据。

             post:邮寄，邮递，有抛出，提交的感觉。
             场景举例:用户注册的时候，填写表格里一堆的信息（姓名、性别、年龄、电话...) ,这些都是要提交给服务端的数据

             Get : https://www.tianqiapi.com/free/day? cityid=10010&cityname=北京&date=20210708

             Post :   https://www.tianqiapi.com/free/day  +       Map<String,String>
                                                                  <city_id，1010>
                                                                  <city_name,北京>
                                                                  <date,20210708>

             Get与Post请求的对比
                              Get                           post
             主要目的         从服务端获取数据                   向服务端提交数据。

                             (也会向服务端发送少量数据,         (也会收到少量服务端的响应数据，比如:
                             比如:请求参数)                   提交成功/失败)

             携带参数的方式    拼接在URL后面。                   单独放到map中。
                             (有限、少量的)                   (大量的)


             一个免费大气API网址
             (1)  天气API网址: https://www.tianqiapi.com/index/doc
             (2)   API (Application Programming Interface)应用程序接口，可是是函数、http接口等

             登录后会有APPID和APPSecret



             认识JSON数据格式

             JSON:(JavaScript Object Notation,JS对象简谱)是一种轻量级的数据交换格式。

             简单JSON格式                                      嵌套JSON格式
             {                                                {
               "cityid":"101120101",                               "name":"小"
               "city":"济南"，                                      "father": {
               "update_time":"20:55",                                  "name":"大明”
               "wea"∵:"晴"，                                        },
               "wea_img":"qing",                                    “phone_number":[
               "tem_day":"17",                                           “1234",
               "tem_night":"7",                                          “2345",
               "win"∵:"东南风",                                           “3456"
               "win_speed":"1级",                                    ]
              }                                               }



              JSON数据解析
              JSONObject表示一个JSON节点
              JSONObject.opt("key")根据键获取值，如果没找到匹配的键，则返回空。(推荐)
              JSONObject.get("key")根据键获取值，如果没找到匹配的键，则抛出异常。

              根据值的类型获取
               JsONObject.optString("key")
               JSONObject.optInt("key")
               JSONObject.optBoolean("key")
               JsONObject.optJSONObject("key")
               JSONObject.optJSONArray("key")



               使用GSON库解析JSON数据到JavaBean
               JSON库的引入
               把json字符串直接转换成JavaBean对象把JavaBean对象转换成json字符串
